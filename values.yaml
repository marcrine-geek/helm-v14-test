dbHost: database-tiberbu.c7ce042sumx9.eu-west-1.rds.amazonaws.com
dbPort: 3306
dbRds: true
dbRootPassword: password
dbRootUser: root
fullnameOverride: ''
image:
  pullPolicy: Always
  repository: marcrine/tiberbuv2
  tag: testing
imagePullSecrets:
  - name: tiberburegistry
ingress:
  annotations: {}
  enabled: false
  hosts:
    - host: erp.cluster.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
jobs:
  backup:
    affinity: {}
    backoffLimit: 0
    enabled: false
    nodeSelector: {}
    resources: {}
    siteName: erp.cluster.local
    tolerations: []
    withFiles: true
  configure:
    affinity: {}
    args: []
    backoffLimit: 0
    command: []
    enabled: true
    envVars: []
    fixVolume: true
    nodeSelector: {}
    resources: {}
    tolerations: []
  createSite:
    adminPassword: changeit
    affinity: {}
    backoffLimit: 0
    dbType: mariadb
    enabled: false
    forceCreate: false
    installApps:
      - erpnext
    nodeSelector: {}
    resources: {}
    siteName: cloud-test.tiberbu.com
    tolerations: []
  custom:
    affinity: {}
    backoffLimit: 0
    containers: []
    enabled: false
    initContainers: []
    jobName: ''
    labels: {}
    nodeSelector: {}
    restartPolicy: Never
    tolerations: []
    volumes: []
  dropSite:
    affinity: {}
    backoffLimit: 0
    enabled: false
    forced: false
    nodeSelector: {}
    resources: {}
    siteName: erp.cluster.local
    tolerations: []
  migrate:
    affinity: {}
    backoffLimit: 0
    enabled: false
    nodeSelector: {}
    resources: {}
    siteName: erp.cluster.local
    skipFailing: false
    tolerations: []
  volumePermissions:
    affinity: {}
    backoffLimit: 0
    enabled: true
    nodeSelector: {}
    resources: {}
    tolerations: []
nameOverride: ''

nginx:
  affinity: {}
  autoscaling:
    enabled: true
    maxReplicas: 3
    minReplicas: 1
    targetCPU: 75
    targetMemory: 75
  envVars: []
  environment:
    frappeSiteNameHeader: $host
    upstreamRealIPAddress: 127.0.0.1
    upstreamRealIPHeader: X-Forwarded-For
    upstreamRealIPRecursive: 'off'
  initContainers: []
  livenessProbe:
    initialDelaySeconds: 5
    periodSeconds: 10
    tcpSocket:
      port: 8080
  nodeSelector: {}
  readinessProbe:
    initialDelaySeconds: 5
    periodSeconds: 10
    tcpSocket:
      port: 8080
  replicaCount: 1
  resources: {}
  service:
    port: 8080
    type: ClusterIP
  sidecars: []
  tolerations: []

  configMap:
    enabled: true
    name: nginx-config

persistence:
  logs:
    enabled: false
    size: 8Gi
    storageClass: efs-sc
  worker:
    enabled: true
    size: 8Gi
    storageClass: efs-sc
podSecurityContext:
  supplementalGroups:
    - 1000
postgresql:
  auth:
    postgresPassword: changeit
    username: postgres
  enabled: false
  primary:
    service:
      ports:
        postgresql: 5432
redis-cache:
  architecture: standalone
  auth:
    enabled: false
    sentinal: false
  enabled: true
  master:
    containerPorts:
      redis: 6379
    persistence:
      enabled: false
redis-queue:
  architecture: standalone
  auth:
    enabled: false
    sentinal: false
  enabled: true
  master:
    containerPorts:
      redis: 6379
    persistence:
      enabled: false
redis-socketio:
  architecture: standalone
  auth:
    enabled: false
    sentinal: false
  enabled: true
  master:
    containerPorts:
      redis: 6379
    persistence:
      enabled: false
securityContext:
  capabilities:
    add:
      - CAP_CHOWN
  runAsNonRoot: true
  runAsUser: 1000
serviceAccount:
  create: true
socketio:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 3
    minReplicas: 1
    targetCPU: 75
    targetMemory: 75
  envVars: []
  initContainers: []
  livenessProbe:
    initialDelaySeconds: 5
    periodSeconds: 10
    tcpSocket:
      port: 9000
  nodeSelector: {}
  readinessProbe:
    initialDelaySeconds: 5
    periodSeconds: 10
    tcpSocket:
      port: 9000
  replicaCount: 1
  resources: {}
  service:
    port: 9000
    type: ClusterIP
  sidecars: []
  tolerations: []
worker:
  default:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 3
      minReplicas: 1
      targetCPU: 75
      targetMemory: 75
    envVars: []
    initContainers: []
    livenessProbe:
      override: false
      probe: {}
    nodeSelector: {}
    readinessProbe:
      override: false
      probe: {}
    replicaCount: 1
    resources: {}
    sidecars: []
    tolerations: []
  gunicorn:
    affinity: {}
    args: []
    autoscaling:
      enabled: false
      maxReplicas: 3
      minReplicas: 1
      targetCPU: 75
      targetMemory: 75
    envVars: []
    initContainers: []
    livenessProbe:
      initialDelaySeconds: 5
      periodSeconds: 10
      tcpSocket:
        port: 8000
    nodeSelector: {}
    readinessProbe:
      initialDelaySeconds: 5
      periodSeconds: 10
      tcpSocket:
        port: 8000
    replicaCount: 1
    resources: {}
    service:
      port: 8000
      type: ClusterIP
    sidecars: []
    tolerations: []
  healthProbe: |
    exec:
      command:
        - bash
        - -c
        - echo "Ping backing services";
        {{- if .Values.mariadb.enabled }}
        {{- if eq .Values.mariadb.architecture "replication" }}
        - wait-for-it {{ .Release.Name }}-mariadb-primary:{{ .Values.mariadb.primary.service.ports.mysql }} -t 1;
        {{- else }}
        - wait-for-it {{ .Release.Name }}-mariadb:{{ .Values.mariadb.primary.service.ports.mysql }} -t 1;
        {{- end }}
        {{- else if .Values.dbHost }}
        - wait-for-it {{ .Values.dbHost }}:{{ .Values.mariadb.primary.service.ports.mysql }} -t 1;
        {{- end }}
        {{- if index .Values "redis-cache" "host" }}
        - wait-for-it {{ .Release.Name }}-redis-cache-master:{{ index .Values "redis-cache" "master" "containerPorts" "redis" }} -t 1;
        {{- else if index .Values "redis-cache" "host" }}
        - wait-for-it {{ index .Values "redis-cache" "host" }} -t 1;
        {{- end }}
        {{- if index .Values "redis-queue" "host" }}
        - wait-for-it {{ .Release.Name }}-redis-queue-master:{{ index .Values "redis-queue" "master" "containerPorts" "redis" }} -t 1;
        {{- else if index .Values "redis-queue" "host" }}
        - wait-for-it {{ index .Values "redis-queue" "host" }} -t 1;
        {{- end }}
        {{- if index .Values "redis-socketio" "host" }}
        - wait-for-it {{ .Release.Name }}-redis-socketio-master:{{ index .Values "redis-socketio" "master" "containerPorts" "redis" }} -t 1;
        {{- else if index .Values "redis-socketio" "host" }}
        - wait-for-it {{ index .Values "redis-socketio" "host" }} -t 1;
        {{- end }}
        {{- if .Values.postgresql.host }}
        - wait-for-it {{ .Values.postgresql.host }}:{{ .Values.postgresql.primary.service.ports.postgresql }} -t 1;
        {{- else if .Values.postgresql.enabled }}
        - wait-for-it {{ .Release.Name }}-postgresql:{{ .Values.postgresql.primary.service.ports.postgresql }} -t 1;
        {{- end }}
    initialDelaySeconds: 15
    periodSeconds: 5
  long:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 3
      minReplicas: 1
      targetCPU: 75
      targetMemory: 75
    envVars: []
    initContainers: []
    livenessProbe:
      override: false
      probe: {}
    nodeSelector: {}
    readinessProbe:
      override: false
      probe: {}
    replicaCount: 1
    resources: {}
    sidecars: []
    tolerations: []
  scheduler:
    affinity: {}
    envVars: []
    initContainers: []
    livenessProbe:
      override: false
      probe: {}
    nodeSelector: {}
    readinessProbe:
      override: false
      probe: {}
    replicaCount: 1
    resources: {}
    sidecars: []
    tolerations: []
  short:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 3
      minReplicas: 1
      targetCPU: 75
      targetMemory: 75
    envVars: []
    initContainers: []
    livenessProbe:
      override: false
      probe: {}
    nodeSelector: {}
    readinessProbe:
      override: false
      probe: {}
    replicaCount: 1
    resources: {}
    sidecars: []
    tolerations: []
global:
  cattle:
    systemProjectId: p-hvh6x